// Code generated by ent, DO NOT EDIT.

package card

import (
	"entgo.io/ent/dialect/sql"
	"github.com/fleezesd/entdemo/ent/predicate"
	"github.com/fleezesd/entdemo/ent/schema"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldEQ(FieldAmount, vc))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// Decimal applies equality check predicate on the "decimal" field. It's identical to DecimalEQ.
func Decimal(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldDecimal, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldEQ(FieldAmount, vc))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldNEQ(FieldAmount, vc))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...schema.Amount) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Card(sql.FieldIn(FieldAmount, v...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...schema.Amount) predicate.Card {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Card(sql.FieldNotIn(FieldAmount, v...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldGT(FieldAmount, vc))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldGTE(FieldAmount, vc))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldLT(FieldAmount, vc))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v schema.Amount) predicate.Card {
	vc := float64(v)
	return predicate.Card(sql.FieldLTE(FieldAmount, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...*sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...*sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v *sql.NullString) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v *sql.NullString) predicate.Card {
	vc := v.String
	return predicate.Card(sql.FieldContains(FieldName, vc))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v *sql.NullString) predicate.Card {
	vc := v.String
	return predicate.Card(sql.FieldHasPrefix(FieldName, vc))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v *sql.NullString) predicate.Card {
	vc := v.String
	return predicate.Card(sql.FieldHasSuffix(FieldName, vc))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Card {
	return predicate.Card(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Card {
	return predicate.Card(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v *sql.NullString) predicate.Card {
	vc := v.String
	return predicate.Card(sql.FieldEqualFold(FieldName, vc))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v *sql.NullString) predicate.Card {
	vc := v.String
	return predicate.Card(sql.FieldContainsFold(FieldName, vc))
}

// DecimalEQ applies the EQ predicate on the "decimal" field.
func DecimalEQ(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldDecimal, v))
}

// DecimalNEQ applies the NEQ predicate on the "decimal" field.
func DecimalNEQ(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldDecimal, v))
}

// DecimalIn applies the In predicate on the "decimal" field.
func DecimalIn(vs ...decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldDecimal, vs...))
}

// DecimalNotIn applies the NotIn predicate on the "decimal" field.
func DecimalNotIn(vs ...decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldDecimal, vs...))
}

// DecimalGT applies the GT predicate on the "decimal" field.
func DecimalGT(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldDecimal, v))
}

// DecimalGTE applies the GTE predicate on the "decimal" field.
func DecimalGTE(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldDecimal, v))
}

// DecimalLT applies the LT predicate on the "decimal" field.
func DecimalLT(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldDecimal, v))
}

// DecimalLTE applies the LTE predicate on the "decimal" field.
func DecimalLTE(v decimal.Decimal) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldDecimal, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(func(s *sql.Selector) {
		p(s.Not())
	})
}
