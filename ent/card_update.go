// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fleezesd/entdemo/ent/card"
	"github.com/fleezesd/entdemo/ent/predicate"
	"github.com/fleezesd/entdemo/ent/schema"
	"github.com/shopspring/decimal"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetAmount sets the "amount" field.
func (cu *CardUpdate) SetAmount(s schema.Amount) *CardUpdate {
	cu.mutation.ResetAmount()
	cu.mutation.SetAmount(s)
	return cu
}

// AddAmount adds s to the "amount" field.
func (cu *CardUpdate) AddAmount(s schema.Amount) *CardUpdate {
	cu.mutation.AddAmount(s)
	return cu
}

// SetName sets the "name" field.
func (cu *CardUpdate) SetName(ss *sql.NullString) *CardUpdate {
	cu.mutation.SetName(ss)
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CardUpdate) ClearName() *CardUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetDecimal sets the "decimal" field.
func (cu *CardUpdate) SetDecimal(d decimal.Decimal) *CardUpdate {
	cu.mutation.ResetDecimal()
	cu.mutation.SetDecimal(d)
	return cu
}

// AddDecimal adds d to the "decimal" field.
func (cu *CardUpdate) AddDecimal(d decimal.Decimal) *CardUpdate {
	cu.mutation.AddDecimal(d)
	return cu
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(card.Table, card.Columns, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Amount(); ok {
		_spec.SetField(card.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedAmount(); ok {
		_spec.AddField(card.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(card.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Decimal(); ok {
		_spec.SetField(card.FieldDecimal, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedDecimal(); ok {
		_spec.AddField(card.FieldDecimal, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetAmount sets the "amount" field.
func (cuo *CardUpdateOne) SetAmount(s schema.Amount) *CardUpdateOne {
	cuo.mutation.ResetAmount()
	cuo.mutation.SetAmount(s)
	return cuo
}

// AddAmount adds s to the "amount" field.
func (cuo *CardUpdateOne) AddAmount(s schema.Amount) *CardUpdateOne {
	cuo.mutation.AddAmount(s)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CardUpdateOne) SetName(ss *sql.NullString) *CardUpdateOne {
	cuo.mutation.SetName(ss)
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CardUpdateOne) ClearName() *CardUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetDecimal sets the "decimal" field.
func (cuo *CardUpdateOne) SetDecimal(d decimal.Decimal) *CardUpdateOne {
	cuo.mutation.ResetDecimal()
	cuo.mutation.SetDecimal(d)
	return cuo
}

// AddDecimal adds d to the "decimal" field.
func (cuo *CardUpdateOne) AddDecimal(d decimal.Decimal) *CardUpdateOne {
	cuo.mutation.AddDecimal(d)
	return cuo
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cuo *CardUpdateOne) Where(ps ...predicate.Card) *CardUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	_spec := sqlgraph.NewUpdateSpec(card.Table, card.Columns, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Amount(); ok {
		_spec.SetField(card.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedAmount(); ok {
		_spec.AddField(card.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(card.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Decimal(); ok {
		_spec.SetField(card.FieldDecimal, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedDecimal(); ok {
		_spec.AddField(card.FieldDecimal, field.TypeFloat64, value)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
